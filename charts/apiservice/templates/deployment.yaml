apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.service.replicas }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "{{ .Values.prometheus.path }}"
        prometheus.io/port: "{{ .Values.prometheus.port }}"
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          ports:
            - containerPort: {{ .Values.service.port }}
          env:
            - name: DATABASE_CONNECTION_STRING
              value: {{ .Values.database.connection_string }}
            - name: AWS_ENDPOINT
              value: {{ .Values.messaging.aws_endpoint }}
            - name: EVENTS_TOPIC_ARN
              value: {{ .Values.messaging.events_topic_arn }}
          livenessProbe:
            httpGet:
              path: /v1/live
              port: {{ .Values.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /v1/ready
              port: {{ .Values.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1